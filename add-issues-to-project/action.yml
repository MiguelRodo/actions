name: "Add Issues to Project"
description: "Adds issues from a specified repository to a specified GitHub Project."
author: "MiguelRodo"

inputs:
  project_name:
    description: "Project name. Defaults to repository name."
    required: false
  project_owner:
    description: "Project owner. Defaults to repository owner."
    required: false
  is_project_owner_org:
    description: "Whether the project owner is an organization. Defaults to `false`."
    required: false
    default: "false"
  source_repo_name:
    description: "Repository name. Defaults to current repository."
    required: false
  source_repo_owner:
    description: "Repository owner. Defaults to current GitHub user."
    required: false
  ADD_ISSUES_TO_PROJECT_TOKEN:
    description: "GitHub token with correct access for accessing issues and writing to projects"
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up GitHub CLI and jq
      shell: bash
      run: |
        sudo apt update -y
        sudo apt install -y gh jq

    - name: Authenticate with PAT
      shell: bash
      env:
        ADD_ISSUES_TO_PROJECT_TOKEN: "${{ inputs.ADD_ISSUES_TO_PROJECT_TOKEN }}"
      run: |
        unset GH_TOKEN
        unset GITHUB_TOKEN
        echo "$ADD_ISSUES_TO_PROJECT_TOKEN" | gh auth login --with-token

    - name: Install gh-projects extension
      shell: bash
      run: gh extension install github/gh-projects
    
    - name: Validate input and format used values
      shell: bash
      env:
        PROJECT_NAME: "${{ inputs.project_name }}"
        PROJECT_OWNER: "${{ inputs.project_owner }}"
        IS_PROJECT_OWNER_ORG: "${{ inputs.is_project_owner_org }}"
        SOURCE_REPO_NAME: "${{ inputs.source_repo_name }}"
        SOURCE_REPO_OWNER: "${{ inputs.source_repo_owner }}"
        CURRENT_USER: "${{ github.actor }}"
      run: |
        if [ -z "${SOURCE_REPO_NAME}" ]; then
          SOURCE_REPO_NAME=$(basename "$(pwd)")
        fi
        if [ -z "${PROJECT_NAME}" ]; then
          PROJECT_NAME_FINAL="$SOURCE_REPO_NAME"
        else
          PROJECT_NAME_FINAL="$PROJECT_NAME"
        fi
        if [ -z "${SOURCE_REPO_OWNER}" ]; then
          SOURCE_REPO_OWNER="$CURRENT_USER"
        fi
        if [ -z "${PROJECT_OWNER}" ]; then
          PROJECT_OWNER_FINAL="$SOURCE_REPO_OWNER"
        else
          PROJECT_OWNER_FINAL="$PROJECT_OWNER"
        fi
        SOURCE_REPO="${SOURCE_REPO_OWNER}/${SOURCE_REPO_NAME}"

        # validate source repo format
        if [[ ! "$SOURCE_REPO" =~ ^[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$ ]]; then
          echo "Error: Invalid source repository format. Expected format: owner/repo."
          exit 1
        fi

        # check that owners exist
        if [ "${IS_PROJECT_OWNER_ORG}" = "true" ]; then
          gh api orgs/"${PROJECT_OWNER_FINAL}" > /dev/null
          if [ $? -ne 0 ]; then
            echo "Error: Organization '${PROJECT_OWNER_FINAL}' not found."
            exit 1
          fi
        else
          gh api users/"${PROJECT_OWNER_FINAL}" > /dev/null
          if [ $? -ne 0 ]; then
            echo "Error: User '${PROJECT_OWNER_FINAL}' not found."
            exit 1
          fi
        fi

        # check that repo exists
        gh api repos/"${SOURCE_REPO}" > /dev/null
        if [ $? -ne 0 ]; then
          echo "Error: Repository '${SOURCE_REPO}' not found."
          exit 1
        fi

        echo "project_name=${PROJECT_NAME_FINAL}" >> $GITHUB_ENV
        echo "project_owner=${PROJECT_OWNER_FINAL}" >> $GITHUB_ENV
        echo "source_repo=${SOURCE_REPO}" >> $GITHUB_ENV

    - name: Get project ID
      id: get-project-id
      shell: bash
      env:
        PROJECT_NAME: "${{ env.project_name }}"
        PROJECT_OWNER: "${{ env.project_owner }}"
        IS_PROJECT_OWNER_ORG: "${{ inputs.is_project_owner_org }}"
      run: |
        if [ "${IS_PROJECT_OWNER_ORG}" = "true" ]; then
          project_id=$(gh projects list --org "${PROJECT_OWNER}" --format json | jq '.projects[] | select(.title=="'"${PROJECT_NAME}"'") | .id')
          if [ -z "$project_id" ]; then
            echo "Error: Project '${PROJECT_NAME}' not found for owner '${PROJECT_OWNER}' (an organisation)."
            exit 1
          fi
        else
          project_id=$(gh projects list --format json --user "${PROJECT_OWNER}" | jq '.projects[] | select(.title=="'"${PROJECT_NAME}"'") | .id')
          if [ -z "$project_id" ]; then
            echo "Error: Project '${PROJECT_NAME}' not found for owner '${PROJECT_OWNER}' (not an organisation)."
            exit 1
          fi
        fi
        echo "project_id=${project_id}" >> $GITHUB_ENV

    - name: Get issues from source repository
      id: get-issues
      shell: bash
      env:
        SOURCE_REPO: "${{ env.source_repo }}"
      run: |
        issues=$(gh issue list --repo "${SOURCE_REPO}" --limit 9999 --json number --jq '.[].number' | tr '\n' ' ')
        if [ -z "$issues" ]; then
          echo "No issues found in repository '${SOURCE_REPO}'."
          exit 0
        fi
        echo "issues=$issues" >> $GITHUB_ENV

    - name: Add issues to project if not already present
      shell: bash
      env:
        ISSUES: "${{ env.issues }}"
        ADD_ISSUES_TO_PROJECT_TOKEN: "${{ inputs.ADD_ISSUES_TO_PROJECT_TOKEN }}"
        PROJECT_ID: "${{ env.project_id }}"
        SOURCE_REPO: "${{ env.source_repo }}"
      run: |
        existing_issue_ids=()
        has_next_page=true
        end_cursor=""

        while [ "$has_next_page" = true ]; do
          response=$(gh api graphql -f query='query($projectId: ID!, $after: String) { node(id: $projectId) { ... on ProjectV2 { items(first: 100, after: $after) { pageInfo { hasNextPage endCursor } nodes { content { __typename ... on Issue { id } } } } } } }' -F projectId="$PROJECT_ID" -F after="$end_cursor")
          existing_issue_ids+=($(echo "$response" | jq -r '.data.node.items.nodes[].content | select(. != null and .__typename == "Issue") | .id'))
          has_next_page=$(echo "$response" | jq -r '.data.node.items.pageInfo.hasNextPage')
          end_cursor=$(echo "$response" | jq -r '.data.node.items.pageInfo.endCursor')
          if [ "$end_cursor" = "null" ]; then
            end_cursor=""
          fi
        done

        existing_issue_ids_str="${existing_issue_ids[*]}"
        for issue in $ISSUES; do
          issue_node_id=$(gh issue view "$issue" --repo "${SOURCE_REPO}" --json id --jq '.id')
          if [[ " ${existing_issue_ids_str[@]} " =~ " $issue_node_id " ]]; then
            echo "Issue #$issue is already in the project. Skipping."
          else
            gh api graphql -f query='mutation($projectId: ID!, $contentId: ID!) { addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) { item { id } } }' -f projectId="$PROJECT_ID" -f contentId="$issue_node_id"
            echo "Added issue #$issue to the project."
          fi
        done
